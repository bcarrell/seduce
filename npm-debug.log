0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.16
3 info using node@v0.10.29
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/bc/.npm/3a52ce78-.lock
11 verbose tar pack [ '/Users/bc/.npm/seduce/0.0.2/package.tgz', '.' ]
12 verbose tarball /Users/bc/.npm/seduce/0.0.2/package.tgz
13 verbose folder .
14 info prepublish seduce@0.0.2
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /Users/bc/.npm/1f1177db-tar.lock
17 silly lockFile c9a91dfc--bc-npm-seduce-0-0-2-package-tgz tar:///Users/bc/.npm/seduce/0.0.2/package.tgz
18 verbose lock tar:///Users/bc/.npm/seduce/0.0.2/package.tgz /Users/bc/.npm/c9a91dfc--bc-npm-seduce-0-0-2-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile c9a91dfc--bc-npm-seduce-0-0-2-package-tgz tar:///Users/bc/.npm/seduce/0.0.2/package.tgz
22 silly lockFile c9a91dfc--bc-npm-seduce-0-0-2-package-tgz tar:///Users/bc/.npm/seduce/0.0.2/package.tgz
23 silly lockFile 6d20f471-sers-bc-npm-seduce-0-0-2-package /Users/bc/.npm/seduce/0.0.2/package
24 verbose lock /Users/bc/.npm/seduce/0.0.2/package /Users/bc/.npm/6d20f471-sers-bc-npm-seduce-0-0-2-package.lock
25 silly lockFile 6d20f471-sers-bc-npm-seduce-0-0-2-package /Users/bc/.npm/seduce/0.0.2/package
26 silly lockFile 6d20f471-sers-bc-npm-seduce-0-0-2-package /Users/bc/.npm/seduce/0.0.2/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'seduce',
29 silly publish   version: '0.0.2',
29 silly publish   description: 'a package for writing isolated SQL',
29 silly publish   main: './lib/index.js',
29 silly publish   scripts: { test: 'gulp test' },
29 silly publish   author: { name: 'Brandon Carrell' },
29 silly publish   license: 'MIT',
29 silly publish   devDependencies:
29 silly publish    { gulp: '^3.8.7',
29 silly publish      'gulp-nodeunit': '0.0.5',
29 silly publish      'gulp-plumber': '^0.6.4',
29 silly publish      'gulp-util': '^3.0.0' },
29 silly publish   dependencies: { lodash: '^2.4.1' },
29 silly publish   keywords: [ 'sql', 'database', 'query', 'querying', 'mysql', 'postgresql' ],
29 silly publish   readme: '# seduce\n\nSeduce is a Node module for keeping your SQL out of your code.  With `seduce`,\nyou write parametrized SQL in .sql files.  Seduce parses it and builds your\nqueries as functions.\n\nSeduce is a way of writing SQL queries.  It does not provide database logic.\n\n### Install\n\n    npm install seduce\n\n#### Usage\n\nStart by writing your SQL queries like this, in a file like `queries.sql`:\n\n    -- name: findByNameAndModel\n    -- Queries the cars table by a car name\n    SELECT *\n    FROM cars\n    WHERE cars.brand = :name AND cars.model = :model\n\n    -- name: findByNames\n    SELECT *\n    FROM cars\n    WHERE cars.brand IN :names\n\nNotice the `name:` notation.  This is required, and the name that you define\nwill be the name of the function that `seduce` will generate for you.  You can\nadd any number of comment lines describing what the query does after that line.\n\nNext, write your query normally.  For any portion that needs to take a\nparameter, indicate your parameter like `:name`.\n\nWrite any number of queries that you want -- each should be separated by an\nempty line.\n\nTo use this query that you\'ve just defined, do this:\n\n    var seduce = require(\'seduce\'),\n        q = seduce(\'queries.sql\');\n\n`seduce(...)` takes file paths to SQL files and returns an ordinary `Object` with functions.  You can call your\nfunctions by referring to them by name.  Any of these are equivalent:\n\n    var carQuery = q.findByNameAndModel(\'Ford\', \'Explorer\');\n\nor\n\n    var carQuery = q.findByNameAndModel({ name: \'Ford\', model: \'Explorer\' });\n\nor\n\n    var myParams = [\'Ford, \'Explorer];\n    var carQuery = q.findByNameAndModel.apply(null, myParams);\n\nThis will return a String like this:\n\n    SELECT * FROM cars WHERE cars.brand = "Ford" AND cars.model = "Explorer"\n\nIf you pass an array as an argument (like if you\'re doing an IN query), it\'ll\nproduce something like this:\n\n    SELECT * FROM cars WHERE cars.brand IN ("Ford", "Honda")\n\nIf you have multiple parameters with the same name, Seduce will take care of\nthat for you and duplicate the value you provide in your query.\n\n#### Example\n\nStarting with `queries.sql` like above...\n\n    var mysql = require(\'mysql\'),\n      connection = mysql.createConnection({\n        host     : \'localhost\',\n        user     : \'me\',\n        password : \'secret\'\n      }),\n      seduce = require(\'seduce\'),\n      q = seduce(\'queries.sql\');\n\n    connection.connect();\n\n    connection\n    .query(q.findByNameAndModel(\'Ford\', \'Explorer\'), function(err, rows, fields) {\n      if (err) throw err;\n\n      console.log(\'The solution is: \', rows[0].solution);\n    });\n\n    connection.end();\n\nExample taken from the documentation for node-mysql.\n\n**Seduce will not automatically escape your parameters.  Use the escape\nfunctionality with your database module.**\n\n#### Advantages\n\n- Writing SQL in Javascript code is awful; anything remotely complex will be on\nmultiple lines, and multiline strings in Javascript usually means dumping your\nstrings into an array and joining them, or concatenating them across multiple\nlines.\n- Your editor likely has solid support for SQL syntax.  By putting your queries\nin sql files, you get the benefits of syntax highlighting and indentation rules.\n- You can copy and paste your queries elsewhere easier, like into your favorite\ndatabase client, without having to deal with stripping quotes or brackets.\n- Someone else can write your queries without having to muck around in code.\n\n#### Status\n\nBrand new.  Use with caution.  Needs more test coverage.\n\n#### Credits\n\nSeduce is heavily inspired by a Clojure library by Kris Jenkins [Yesql](https://github.com/krisajenkins/yesql).\n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: 'a13a767debf61df11f20ebfab113f52074ab7e46',
29 silly publish   _id: 'seduce@0.0.2',
29 silly publish   _shasum: 'f00aec2bd3dfa95a3215f6df848184f314513d8f',
29 silly publish   _from: '.' }
30 verbose request where is /seduce
31 verbose request registry https://registry.npmjs.org/
32 verbose request id 723d43fe79969a0b
33 verbose url raw /seduce
34 verbose url resolving [ 'https://registry.npmjs.org/', './seduce' ]
35 verbose url resolved https://registry.npmjs.org/seduce
36 verbose request where is https://registry.npmjs.org/seduce
37 info trying registry request attempt 1 at 07:44:25
38 http PUT https://registry.npmjs.org/seduce
39 http 403 https://registry.npmjs.org/seduce
40 verbose headers { date: 'Fri, 08 Aug 2014 11:44:26 GMT',
40 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '6380',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   'x-served-by': 'cache-jfk1033-JFK',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1407498265.838305,VS0,VE313',
40 verbose headers   'keep-alive': 'timeout=10, max=50',
40 verbose headers   connection: 'Keep-Alive' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 0.0.2
42 error old={"name":"seduce","version":"0.0.2","description":"a package for writing isolated SQL","main":"./lib/index.js","scripts":{"test":"gulp test"},"author":{"name":"Brandon Carrell"},"license":"MIT","devDependencies":{"gulp":"^3.8.7","gulp-nodeunit":"0.0.5","gulp-plumber":"^0.6.4","gulp-util":"^3.0.0"},"dependencies":{"lodash":"^2.4.1"},"keywords":["SQL","database","query","querying","mysql","postgresql"],"gitHead":"c556799328c1fc418a3ab48ab9e2a6c0ebfe0bd6","_id":"seduce@0.0.2","_shasum":"949d97e3731e6c6ee5c8c3faecc4d9a78a5e20a2","_from":".","_npmVersion":"1.4.16","_npmUser":{"name":"bcarrell","email":"brandoncarrell@gmail.com"},"maintainers":[{"name":"bcarrell","email":"brandoncarrell@gmail.com"}],"dist":{"shasum":"949d97e3731e6c6ee5c8c3faecc4d9a78a5e20a2","tarball":"http://registry.npmjs.org/seduce/-/seduce-0.0.2.tgz"}}
42 error new={"name":"seduce","version":"0.0.2","description":"a package for writing isolated SQL","main":"./lib/index.js","scripts":{"test":"gulp test"},"author":{"name":"Brandon Carrell"},"license":"MIT","devDependencies":{"gulp":"^3.8.7","gulp-nodeunit":"0.0.5","gulp-plumber":"^0.6.4","gulp-util":"^3.0.0"},"dependencies":{"lodash":"^2.4.1"},"keywords":["sql","database","query","querying","mysql","postgresql"],"readme":"# seduce\u000a\u000aSeduce is a Node module for keeping your SQL out of your code.  With `seduce`,\u000ayou write parametrized SQL in .sql files.  Seduce parses it and builds your\u000aqueries as functions.\u000a\u000aSeduce is a way of writing SQL queries.  It does not provide database logic.\u000a\u000a### Install\u000a\u000a    npm install seduce\u000a\u000a#### Usage\u000a\u000aStart by writing your SQL queries like this, in a file like `queries.sql`:\u000a\u000a    -- name: findByNameAndModel\u000a    -- Queries the cars table by a car name\u000a    SELECT *\u000a    FROM cars\u000a    WHERE cars.brand = :name AND cars.model = :model\u000a\u000a    -- name: findByNames\u000a    SELECT *\u000a    FROM cars\u000a    WHERE cars.brand IN :names\u000a\u000aNotice the `name:` notation.  This is required, and the name that you define\u000awill be the name of the function that `seduce` will generate for you.  You can\u000aadd any number of comment lines describing what the query does after that line.\u000a\u000aNext, write your query normally.  For any portion that needs to take a\u000aparameter, indicate your parameter like `:name`.\u000a\u000aWrite any number of queries that you want -- each should be separated by an\u000aempty line.\u000a\u000aTo use this query that you've just defined, do this:\u000a\u000a    var seduce = require('seduce'),\u000a        q = seduce('queries.sql');\u000a\u000a`seduce(...)` takes file paths to SQL files and returns an ordinary `Object` with functions.  You can call your\u000afunctions by referring to them by name.  Any of these are equivalent:\u000a\u000a    var carQuery = q.findByNameAndModel('Ford', 'Explorer');\u000a\u000aor\u000a\u000a    var carQuery = q.findByNameAndModel({ name: 'Ford', model: 'Explorer' });\u000a\u000aor\u000a\u000a    var myParams = ['Ford, 'Explorer];\u000a    var carQuery = q.findByNameAndModel.apply(null, myParams);\u000a\u000aThis will return a String like this:\u000a\u000a    SELECT * FROM cars WHERE cars.brand = \"Ford\" AND cars.model = \"Explorer\"\u000a\u000aIf you pass an array as an argument (like if you're doing an IN query), it'll\u000aproduce something like this:\u000a\u000a    SELECT * FROM cars WHERE cars.brand IN (\"Ford\", \"Honda\")\u000a\u000aIf you have multiple parameters with the same name, Seduce will take care of\u000athat for you and duplicate the value you provide in your query.\u000a\u000a#### Example\u000a\u000aStarting with `queries.sql` like above...\u000a\u000a    var mysql = require('mysql'),\u000a      connection = mysql.createConnection({\u000a        host     : 'localhost',\u000a        user     : 'me',\u000a        password : 'secret'\u000a      }),\u000a      seduce = require('seduce'),\u000a      q = seduce('queries.sql');\u000a\u000a    connection.connect();\u000a\u000a    connection\u000a    .query(q.findByNameAndModel('Ford', 'Explorer'), function(err, rows, fields) {\u000a      if (err) throw err;\u000a\u000a      console.log('The solution is: ', rows[0].solution);\u000a    });\u000a\u000a    connection.end();\u000a\u000aExample taken from the documentation for node-mysql.\u000a\u000a**Seduce will not automatically escape your parameters.  Use the escape\u000afunctionality with your database module.**\u000a\u000a#### Advantages\u000a\u000a- Writing SQL in Javascript code is awful; anything remotely complex will be on\u000amultiple lines, and multiline strings in Javascript usually means dumping your\u000astrings into an array and joining them, or concatenating them across multiple\u000alines.\u000a- Your editor likely has solid support for SQL syntax.  By putting your queries\u000ain sql files, you get the benefits of syntax highlighting and indentation rules.\u000a- You can copy and paste your queries elsewhere easier, like into your favorite\u000adatabase client, without having to deal with stripping quotes or brackets.\u000a- Someone else can write your queries without having to muck around in code.\u000a\u000a#### Status\u000a\u000aBrand new.  Use with caution.  Needs more test coverage.\u000a\u000a#### Credits\u000a\u000aSeduce is heavily inspired by a Clojure library by Kris Jenkins [Yesql](https://github.com/krisajenkins/yesql).\u000a","readmeFilename":"README.md","gitHead":"a13a767debf61df11f20ebfab113f52074ab7e46","_id":"seduce@0.0.2","_shasum":"f00aec2bd3dfa95a3215f6df848184f314513d8f","_from":".","_npmVersion":"1.4.16","_npmUser":{"name":"bcarrell","email":"brandoncarrell@gmail.com"},"maintainers":[{"name":"bcarrell","email":"brandoncarrell@gmail.com"}],"dist":{"shasum":"f00aec2bd3dfa95a3215f6df848184f314513d8f","tarball":"http://registry.npmjs.org/seduce/-/seduce-0.0.2.tgz"}}: seduce
42 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:300:14)
42 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:65)
42 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:929:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Darwin 13.3.0
45 error command "node" "/usr/local/bin/npm" "publish"
46 error cwd /Users/bc/github/seduce
47 error node -v v0.10.29
48 error npm -v 1.4.16
49 verbose exit [ 1, true ]
